function FunctionDefinition_0 ( bytes32 [ NumberLiteral_0 ] memory Parameter_0 , bytes memory Parameter_1 , uint256 Parameter_2 ) internal pure returns ( uint256 Parameter_3 ) { uint256 VariableDeclaration_0 = Identifier_0 . length ; require ( Identifier_1 % 32 == 0 , stringLiteral_0 ) ; Identifier_2 = index + Identifier_3 / 32 ; require ( Identifier_4 <= NumberLiteral_1 , stringLiteral_1 ) ; assembly { let Identifier_5 := AssemblyExpression_1 ( DecimalNumber_0 , AssemblyExpression_0 ) for { let i := 0 } AssemblyExpression_4 ( AssemblyExpression_2 , AssemblyExpression_3 ) { i := add ( AssemblyExpression_5 , HexNumber_0 ) } { mstore ( add ( AssemblyExpression_6 , add ( AssemblyExpression_7 , AssemblyExpression_8 ) ) , mload ( add ( add ( AssemblyExpression_9 , AssemblyExpression_10 ) , HexNumber_1 ) ) ) } } }