function FunctionDefinition_0 ( address Parameter_0 , address Parameter_1 ) internal view returns ( uint256 Parameter_2 , uint256 Parameter_3 ) { require ( ! Identifier_0 , stringLiteral_0 ) ; if ( Identifier_1 != Identifier_2 ) { if ( Identifier_3 == Identifier_4 . MemberAccess_0 ) { if ( Identifier_5 == Identifier_6 ) { rate = Identifier_7 ; } else if ( Identifier_8 == Identifier_9 ) { rate = SafeMath . div ( 10 ** NumberLiteral_0 , Identifier_10 ) ; } else { ( bool VariableDeclaration_0 , bytes memory data ) = Identifier_11 . MemberAccess_1 ( abi . MemberAccess_2 ( stringLiteral_1 , Identifier_12 , Identifier_13 , 10 ** NumberLiteral_1 ) ) ; assembly { switch AssemblyExpression_0 case 0 { rate := 0 } default { rate := mload ( add ( AssemblyExpression_1 , DecimalNumber_0 ) ) } } } } else if ( Identifier_14 == Identifier_15 . MemberAccess_3 ) { return super . MemberAccess_4 ( Identifier_16 , Identifier_17 ) ; } else { rate = Identifier_18 [ Identifier_19 ] [ Identifier_20 ] ; } Identifier_21 = Identifier_22 ( Identifier_23 , Identifier_24 ) ; } else { rate = 10 ** 18 ; Identifier_25 = 10 ** 18 ; } }